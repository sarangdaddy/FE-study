# 04. 타입 확장하기, 좁히기

- 기존에 정의한 타입을 확장하여 새로운 타입을 정의해보자.
- 정확한 타입 추론을 할 수있도록 타입을 좁혀보자.

## 4.1 타입 확장하기

- 기존 타입을 사용해서 새로운 타입을 정의한다.
- extends, 교차 타입, 유니온 타입을 사용하여 확장한다.
- 중복되는 타입의 선언을 줄일 수 있다.

```ts
interface BaseMenuItem {
  itemName: string | null;
  itemImageUrl: string | null;
  itemDiscountAmount: number;
  stock: number | nulll;
}

interface BaseCartItem extends BaseMenuItem {
  quantity: number;
}

interface EditableCartItem extends BaseMenuItem {
  isSoldOut: boolean;
  optionGroups: SelectableOptionGroup[];
}
```

## 4.2 타입 좁히기 (타입 가드)

- 타입스크립트에서 타입 좁히기는 타입 범위를 작은 법위로 좁혀나가는 과정을 말한다.
- 이를 통해 더 정확하고 명시적인 타입 추론을 할 수 있다.

### 1. 타입 가드에 따라 분기 처리하기

- 타입스크립트에서 분기 처리는 조건문과 타입 가드를 활용한다.
- 어떤 함수가 A|B 타입의 매개변수를 받을때 타입이 A 또는 B 를 구분하고 싶다면?
- if문을 사용하려해도 타입은 컴파일에서 모두 사라진다.
- 이때 타입 가드를 활용한다.
- 타입 가드는 `typeof`, `instanceof`, `in`과 같은 자바스크립트 연산자를 활용한다.
- 자바스크립트는 런타임에 사용될 수 있기 때문이다.

### 2. 원시 타입을 추론할 때 : typeof 연산자 활용

```ts
const replaceHyphen: (data: string | Data) => string | Date = (date) => {
  if (typeof date === "string") {
    return date.replace(/-/g, "/");
  }

  return date;
};
```

- typeof는 자바스크립트 동작 방식으로 인해 null과 배열 타입을 object로 판단한다.
- 때문에 아래 원시 타입을 좁히는 용도로만 사용해야한다.
- `string`, `number`, `boolean`, `undefined`, `object`, `function`, `bigint`, `symbol`

### 3. 인스턴트화된 객체 타입을 판별할 때 : instanceof 연산자 활용

- 인스턴스화된 객체 타입을 판별하는 타입 가드로 사용한다.
- `A instanceof B` 형태로 검사할 대상 변수 A, 특정 객체의 생성자 B

```tsx
interface Range {
  start: Date;
  end: Date;
}

interface DatePickerProps {
  selectedDates?: Date | Range;
}

const DatePicker = ({ selectedDates }: DatePickerProps) => {
  const [selected, setSelected] = useState(convertToRange(selectedDates));
  //...
};

export function convertToRange(selected?: Date | Range): Range | undefined {
  return selected instanceof Date
    ? { start: selected, end: selected }
    : selected;
}
```

- selected가 Date면 Range로 만들어 주고 Range면 그대로 반환

### 4. 객체의 속성이 있는지 없는지에 따라 구분 : in 연산자 활용

- 객체에 속성이 있는지 확인한다.
- 속성이 있는지 없는지에 따라 객체 타입을 구분할 수 있다.
- A라는 속성이 B객체에 존재하는지를 검사한다.

```tsx
export type NoticeDialogProps =
  | BasicNoticeDialogProps
  | NoticeDialogWithCookieProps;
```

- NoticeDialog는 전달 받는 props에 따라 렌더링 하는 컴포넌트를 다르게 하고 싶다.

```tsx
// NoticeDialog 컴포넌트 정의
const NoticeDialog = (props: NoticeDialogProps) => {
  if ("cookieKey" in props) {
    // cookieKey 속성이 있는 경우
    return <NoticeDialogWithCookie {...props} />;
  }
  // 기본 NoticeDialog 컴포넌트 렌더링
  return <NoticeDialogBase {...props} />;
};

export default NoticeDialog;
```

### is 연산자로 사용자 정의 타입 가드 만들어 활용하기

- 사용자 정의 타입 가드는 특정 변수가 특정 타입인지 여부를 확인하는 함수다.
- A is B : A는 매개변수 이름, B는 타입이다.
- 반환 타입을 타입 명제로 지정하게 되면 반환 값이 참일 떄 A 매개변수의 타입을 B타입으로 취급한다.

```ts
const getAvailableDestinationNameList = async (): Promise<
  DestinationName[]
> => {
  const data = await AxiosRequest<string[]>("get", ".../destinations");
  const destinationNames: DestinationName[] = [];
  data?.forEach((str) => {
    if (isDestinationCode(str)) {
      destinationNames.push({ destinationName: str });
    }
  });
  return destinationNames;
};

// isDestinationCode 함수의 타입 가드
function isDestinationCode(code: string): code is DestinationCode {
  // 여기에 'code'가 DestinationCode 타입인지 확인하는 로직
}
```
